import java.util.Random;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.awt.Color;
public class GridViewer{
private static final int DEFAULT_WIDTH = 12;
private static final int DEFAULT_DEPTH = 12;
// chances of death creates probability of birth
private static final double GRASS_CREATION_PROBABILITY = 0.75;
private static final double TREE_CREATION_PROBABILITY = 0.60;
private static final double DEER_CREATION_PROBABILITY = 0;
private List<vegetation> vegetation;
//private List
private Board board;
private int step;
 private GridViewer  view;
//
        Public   GridViewer(int depth, int width)    {
        if(width <= 0 || depth <= 0) {
            System.out.println("Gridviewer must be greater than zero.");
            System.out.println("Default values."); //12â€™ as defined in width and depth
            depth = DEFAULT_DEPTH;
            width = DEFAULT_WIDTH;
 }        
animals = new ArrayList<Animal>();
board = new Board(depth, width);
view = new GridViewer(depth, width);
view.setColor(Tree.class, Color.YELLOW);//Trees color yellow
 view.setColor(Deer.class, Color.BROWN); // deer color Brown
view.setColor(Grass.class, Color.GREEN);//Grass color Green
 reset(); }
 public void  GameViewer()    {
        simulate(3000);
    }    
public void simulate(int numTurns)
    {
        for(int step = 1; step <= numTurns && gridviewer.isViable(field); step++) {
            simulateTurnsOne();
        }
    }
   // 
   public void simulateTurnsOne()
    {
        turns++;
List<Animal> newAnimals = new ArrayList<Animal>();        
for(Iterator<Animal> it = animals.iterator(); it.hasNext(); ) {
Animal animal = it.next();
animal.act(newAnimals);
if(! animal.isAlive()) {
it.remove();    }  }
 animals.addAll(newAnimals);
view.showStatus(turns, field);   }        
    public void reset();
      turns = 10;//maximum turns
        animals.clear();
        populate();        
       view.showStatus(step, field);
    }    
 private void populate()
    {
   Random rand = Randomizer.getRandom();
        board.clear();
        for(int row = 0; row < board.getDepth(); row++) {
          for(int col = 0; col < board.getWidth(); col++) {
             if(rand.nextDouble() <= GRASS_CREATION_PROBABILITY) {
                    Location location = new Location(row, col);
                    Grass grass = new Grass(true, board, location);
                    vegetation.add(grass);
                }
                else if(rand.nextDouble() <= TREE_CREATION_PROBABILITY) {
                    Location location = new Location(row, col);
                    Tree tree = new Tree(true, board, location);
                    vegetation.add(deer);
                }   }    }  } }

